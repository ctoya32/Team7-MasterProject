// declaring variables 
let radiusCircle = 100;
let xCircle;
let yCircle;
let scoreCircle = 0;
var screen = 0;
let level =1;
let livesCircle = 3;

let sx;
let sy;
let squareSize = 55;
let overSquare = false;
let lockedS = false;
//Circle
let cx;
let cy;
let circleSize = 55;
let overCircle = false;
let lockedC = false;
//Triangle
let tx;
let ty;
let triangleSize = 135;
let overTriangle = false;
let lockedT = false;

//timer 
//note: you can change amount of time here
let mins = 1;
let sec = 30;

//Level & Score
let scoreShape = 5;
let levelShape = 0;
let finalScore;

function setup() {
  createCanvas(900, 550);
  xCircle = random(100, 800);
  yCircle = random(100,380);
  
  sx = width / 2.0;
  sy = height / 2.0;
  cx = width / 2.0;
  cy = height / 2.0;
  tx = width / 2.0;
  ty = height / 2.5;
}
function draw() {
  // calling games
  if(screen == 0)
   titleScreen()
  else if(screen == 1){
    typingGame()
  }
  else if(screen == 2 ){
    if (levelShape == 0) {
    WelcomeScreen();
  }
  else if (levelShape == 1){
    levelOne();
    countdown();
  }
  else if (levelShape == 2){
    levelTwo();
    countdown();
  }
  else if (levelShape == 3){
    levelThree();
    countdown();
  }
  else if (levelShape == 4){
    MatcherEnd();
    
  }
  
}
  else if(screen ==3){
    circleGame()
  }
  else if(screen == 4){
    clear()
    endGame();
  }
  else if(screen ==5){
    clear()
    CompleteGame()
}
}



function titleScreen(){
  // runs when program Starts aka home screen
  // add images that display game
  // add good background
  
  background(100,20,240);
  fill(0)
  rect(390,-30,100,55,15)
  //this code gets run when start button is pressed
  fill(255)
  

  
  let menuButton = createButton('Home');
  menuButton.size(94,20);
  menuButton.position(393, 0)
  menuButton.style('font-size','18px');
  menuButton.style('background-color', 'black');
  menuButton.style('color', 'white');
  
  let typingButton = createButton('Typing Words');
  typingButton.size(150,40);
  typingButton.position(100, 500)
  typingButton.style('font-size','18px');
  //goes to typing game

  
  textSize(16);
  textFont('Georgia')
  text('Using one or more fingers \nto improve Muscle Memory', 80, 450);
  
  //just a placeholder image, you can comment out line 54-56 if it's giving you errors
  let tracingButton = createButton('Shape Matcher');
  tracingButton.size(150,40);
  tracingButton.position(375,500)
  tracingButton.style('font-size','18px');
  //goes to tracing game
  
  textSize(16);
  textFont('Georgia')
  text('Improves visual recognition \nof common shapes', 350, 450);
   
  
  
  let circleButton = createButton('Circle Clicking');
  circleButton.size(150,40);
  circleButton.position(650,500)
  circleButton.style('font-size','18px');
  //goes to circle game
  
  textSize(16);
  textFont('Georgia')
  text('Hand-eye coordination \ntraining with clicking', 650, 450);
  
stroke(0)
  noFill()
  rect(70,430,210,50,15); //1st box
  rect(340,430,215,50,15); //2nd box
  rect(635,430,190,50,15); //3rd box
  
  
 menuButton.mousePressed(function(){
   clear()
  screen = 0;
   
   
   
 })
  
  
  typingButton.mousePressed(function(){
    clear()
    typingButton.remove()
    tracingButton.remove()
    circleButton.remove()
     screen = 1 ;
    
      })
  
  tracingButton.mousePressed(function(){ 
    clear()
    typingButton.remove()
    tracingButton.remove()
    circleButton.remove()
    
  screen =2;
    
      })
  
   circleButton.mousePressed(function(){
   clear()
     typingButton.remove()
    tracingButton.remove()
    circleButton.remove()
         removeElements()

     
     scoreCircle = 1         //sets score when button is clicked
     level =1;               //sets  level when button is clicked
     radiusCircle = 100; //sets radius of circle when button is clicked
     livesCircle = 4; //sets Lives
    screen=3;                //calls game screen
     
   })
  
}
//typing game goes here
function typingGame(){
  
 
  
  
}

//tracing game goes here
function WelcomeScreen(){
background(130);
  fill(0);
  textSize(85)
  text('Welcome to the', 150, 100);
  textSize(45);
  text('Shape Matching Game!', 200, 150);
  textSize(20);
  text('*You will be given 1 minute and 30 seconds\n           total to complete all the levels', 250, 250);
  text('Good Luck!', 390, 330);
  let start = createButton('Start')
  
  start.size(150,40);
  start.position(375,410)
  start.style('font-size','18px');
  
  start.mousePressed(function(){
     levelShape = 1;               //sets  level when button is 
    clear();
    start.remove();
    removeElements();
   })

}
function levelOne() {
  clear();
  
  background(130);
  textSize(30);
  text('Score: ' + scoreShape,80,30);
  textSize(45)
  text('Level '+ levelShape, 440,50)
  rectMode(RADIUS);
  strokeWeight(4);
  square(sx, sy, squareSize);
  triangle(200, 180, 100, 300, 300, 300);
  circle(700, 250, 150);
  // to tell if its over the shape
  if (
    mouseX > sx - squareSize &&
    mouseX < sx + squareSize &&
    mouseY > sy - squareSize &&
    mouseY < sy + squareSize
  ) {
    overSquare = true;
    if (!lockedS) {
      stroke(255, 255, 0);
      fill(100);
    }
  } else {
    stroke(255);
    fill(100);
    overSquare = false;
  }
  let backCircleButton = createButton('Back');
  backCircleButton.size(150,40);
  backCircleButton.position(0,510)
  backCircleButton.style('font-size','18px');
  
  let restartMatcherButton = createButton('Restart');
  restartMatcherButton.size(150,40);
  restartMatcherButton.position(375,510)
  restartMatcherButton.style('font-size','18px');
  
  
  
  backCircleButton.mousePressed(function(){
   clear()
     backCircleButton.remove()
    removeElements()
    screen = 0;
  })
  
  restartMatcherButton.mousePressed(function(){
   
     scoreShape = 0         //sets score when button is clicked
     levelShape =1;               //sets  level when button is clicked
                   //calls game screen
     
   })
}

function levelTwo() {
  // An ellipse
  background(130);
  
  textSize(30);
  text('Score: ' + scoreShape,80,30);
  textSize(45)
  text('Level '+ levelShape, 440,50);
  ellipseMode(RADIUS);
  strokeWeight(4);
  circle(cx, cy, circleSize);
  rect(220, 250, 100, 50);
  triangle(700, 180, 600, 300, 800, 300);
  if (
    mouseX > cx - circleSize &&
    mouseX < cx + circleSize &&
    mouseY > cy - circleSize &&
    mouseY < cy + circleSize
  ) {
    overCircle = true;
    if (!lockedC) {
      stroke(255, 255, 0);
      fill(100);
    }
  } else {
    stroke(255);
    fill(100);
    overCircle = false;
  }
  let backCircleButton = createButton('Back');
  backCircleButton.size(150,40);
  backCircleButton.position(0,510)
  backCircleButton.style('font-size','18px');
  
  let restartMatcherButton = createButton('Restart');
  restartMatcherButton.size(150,40);
  restartMatcherButton.position(375,510)
  restartMatcherButton.style('font-size','18px');
  
  
  
  backCircleButton.mousePressed(function(){
   clear()
     backCircleButton.remove()
    removeElements()
    screen = 0;
  })
  
  restartMatcherButton.mousePressed(function(){
   
     scoreShape = 0         //sets score when button is clicked
     levelShape =1;               //sets  level when button is clicked
                   //calls game screen
     
   })
}

function levelThree() {
  // A triangle
  background(130);
  
  textSize(30);
  text('Score: ' + scoreShape,80,30);
  textSize(45)
  text('Level '+ levelShape, 440,50);
  ellipseMode(RADIUS);
  strokeWeight(4);
  triangle(tx, ty, 340, 350, 560, 350);
  circle(200, 250, 80);
  square(700, 250, 80)
  
  if (
    mouseX > tx - triangleSize &&
    mouseX < tx + triangleSize &&
    mouseY > ty - triangleSize &&
    mouseY < ty + triangleSize
  ) {
    overTriangle = true;
    if (!lockedT) {
      stroke(255, 255, 0);
      fill(100);
    }
  } else {
    stroke(255);
    fill(100);
    overTriangle = false;
  }
  let backCircleButton = createButton('Back');
  backCircleButton.size(150,40);
  backCircleButton.position(0,510)
  backCircleButton.style('font-size','18px');
  
  let restartMatcherButton = createButton('Restart');
  restartMatcherButton.size(150,40);
  restartMatcherButton.position(375,510)
  restartMatcherButton.style('font-size','18px');
  
  
  
  backCircleButton.mousePressed(function(){
   clear()
     backCircleButton.remove()
    removeElements()
    screen = 0;
  })
  
  restartMatcherButton.mousePressed(function(){
   
     scoreShape = 0         //sets score when button is clicked
     levelShape =1;               //sets  level when button is clicked
                   //calls game screen
     
   })
}

function MatcherEnd() {
  clear();
  removeElements();
  background(120);
  stroke(0);
  fill(0);
  textSize(50);
  text("You Win", 350, 250);
  textSize(50);
  text("Congrats!", 570, 250);
  textSize(20);
  strokeWeight(0);
  fill(0);
  finalScore = scoreShape;
  if (finalScore >= 40) {
    text("Final Score: " + finalScore, 450, 300);
    text("Perfect Score", 450, 320);
  }
  else if (finalScore >= 25) {
    text("Final Score: " + finalScore, 450, 300);
    text("Great Job!", 450, 320);
  }
  else if (finalScore >= 10) {
    text("Final Score: " + finalScore, 450, 300);
    text("You did good!", 450, 320);
  }
  
  
  let backCircleButton = createButton('Back');
  backCircleButton.size(150,40);
  backCircleButton.position(0,510)
  backCircleButton.style('font-size','18px');
  
  let restartMatcherButton = createButton('Restart');
  restartMatcherButton.size(150,40);
  restartMatcherButton.position(375,510)
  restartMatcherButton.style('font-size','18px');
  
  
  
  backCircleButton.mousePressed(function(){
   clear()
     backCircleButton.remove()
    removeElements()
    screen = 0;
  })
  
  restartMatcherButton.mousePressed(function(){
   
     scoreShape = 0         //sets score when button is clicked
     levelShape =1;               //sets  level when button is clicked
                   //calls game screen
     
   })
  
  
}
function countdown() {
  textAlign(CENTER, CENTER);
  textSize(20);
  
  text(mins, 840, 30);
  text(":", 860, 30)
  text(sec, 880, 30)
  
  if (mins > 0 && sec == 0 && frameCount == 1 ) {
    minute --;
  } 
    // for (let i = 60; i < 60; i--){
    if (mins > 0 && sec == 0 && frameCount % 60 == 0){
    sec = 60;
  }
  if (sec == 60){
    mins--;
  }
  if (sec <= 60 && frameCount % 60 ==0){
    sec--;
  }
  if (mins > 0 && sec == 0 && frameCount % 3600 == 0){
    minute--;
  }
  
  if (mins == 0 && sec < 0) {
    background(120)
    textSize(50)
    stroke(0);
    text("GAME OVER", width/2, height/2);
  }
  
}

function circleGame(){
  // add cool background
 
  
  background(22,44,212)
  
  
  
   let backCircleButton = createButton('Back');
  backCircleButton.size(150,40);
  backCircleButton.position(0,510)
  backCircleButton.style('font-size','18px');
  
  let restartCircleButton = createButton('Restart');
  restartCircleButton.size(150,40);
  restartCircleButton.position(375,510)
  restartCircleButton.style('font-size','18px');
  
  
  
  backCircleButton.mousePressed(function(){
   clear()
     backCircleButton.remove()
    removeElements()
    screen = 0;
  })
  
  restartCircleButton.mousePressed(function(){
   
     scoreCircle = 1         //sets score when button is clicked
     level =1;               //sets  level when button is clicked
     radiusCircle = 100; //sets radius of circle when button is clicked
     livesCircle = 4; //sets Lives
    screen=3;                //calls game screen
     
   })

    
  
   

  fill('green')
ellipse(xCircle,yCircle,radiusCircle*2, radiusCircle*2); //starting circle
  textSize(30);
  fill(255)
  text('Score: ' + scoreCircle,10,30); //score display
  textSize(45)
  text('Level '+ level, 370,80) //level display
  textSize(30);
  fill(255)
  text('Lives Left: ' + livesCircle,730,30); //score display
  // add lives
  

  
    
}
  function mousePressed() {
    if(screen == 3){
  let d = dist(mouseX, mouseY, xCircle ,yCircle);
  if(d<radiusCircle){
    //add correct sound
    newCircle();
    ++scoreCircle;
  
    if(scoreCircle == 10){
      // add level sound
     
      level=2
      radiusCircle = radiusCircle/2; //decreases radius size
    }
      if(scoreCircle == 20){
        
        // add level sound
      level=3
      
      radiusCircle = radiusCircle/3; //decreases radius size
    
    }
    if(scoreCircle == 30 ){
      clear()
      screen=5;
    }
        
  }
    else if(livesCircle == 1){
      clear()
      screen=4;
      
    }
    else{
     
      //add error sound
      --scoreCircle;
      --livesCircle;
    }
  
    
  }
  else if (screen == 2){
    if (overSquare) {
    lockedS = true;
    removeElements();
    if (levelShape == 1) {
      scoreShape = scoreShape + 20;
    }    
    levelShape = 2;
    
  } else {
    lockedS = false;
    if (levelShape == 1) {
      scoreShape = scoreShape - 5;
    }    
  }
  
if (overCircle) {
    lockedC = true;
  removeElements();
  if (levelShape == 2) {
      scoreShape = scoreShape + 20;
    }    
    levelShape = 3;
  } else {
    lockedC = false;
    if (levelShape == 2) {
      scoreShape = scoreShape - 5;
    }    
  }
  
if (overTriangle) {
    lockedT = true;
  removeElements();
    levelShape = 4;
  
  } else {
    lockedT = false;
    if (levelShape == 3) {
      scoreShape = scoreShape - 5;
    }    
  }

  }
}

function mouseReleased() {
  if (levelShape == 1) {
    lockedS = false;
  }
  else if (levelShape == 2) {
    lockedC = false;
  }
  else if (levelShape == 3) {
    lockedT = false;
  }
}

function newCircle(){
  
  xCircle = random(100, 800); // creates new circle x location
  yCircle = random(120,380); // creates new circle y location
 ellipse(xCircle,yCircle,radiusCircle*2, radiusCircle*2); //creates new circle
  
  
}


function endGame(){
  
background(200,0,0);
  fill(0)
  fill(0)
  rect(0,490,950,550,0,0) 
  textSize(100);
  fill(0);
  text('Game Over', 200,100,550);
  textSize(50);
    text('Try Again', 340, 380,550);
  textSize(20);
  text('Click the \'Circle Clicking\' Button', 310,450,550);

  
}

function CompleteGame(){
  
background(0,200,0);
  fill(0)
  rect(390,3,100,35,15)
  fill(0)
  rect(0,490,950,550,0,0) 
  textSize(100);
  fill(0);
  text('You Win', 250,100,550);
  textSize(50);
    text('Congrats!', 340, 380,550);
  textSize(20);
  text('', 310,450,550);

  
}
